<?php

/**
 * Implements hook_theme().
 */
function wmcontroller_theme()
{
    return \Drupal::service('wmcontroller.service.templatelocator')->getThemes();
}

/**
 * Sets the variables set in a Controller
 *
 * @param $variables
 * @see \Drupal\wmcontroller\ViewBuilder\ViewBuilder::setData
 */
function wmcontroller_theme_set_variables(&$variables)
{
    // Skip if no data is set or not set as an array
    if (!isset($variables['_data']) || !is_array($variables['_data'])) {
        return;
    }
    $variables = array_merge($variables, $variables['_data']);
    unset($variables['_data']);
}

/**
 * Implements hook_theme_registry_alter().
 */
function wmcontroller_theme_registry_alter(&$registry)
{
    array_unshift(
        $registry['pager']['preprocess functions'],
        'wmcontroller_set_current_pager_route'
    );
}

/**
 * Set route_name and route_params so our OutboundProcessor\Pager
 * can do its thang.
 */
function wmcontroller_set_current_pager_route(&$variables)
{
    if (
        !empty($variables['pager']['#route_name'])
        && $variables['pager']['#route_name'] !== '<none>'
    ) {
        return;
    }

    $routeInfo = \Drupal::service('current_route_match');
    $variables['pager']['#route_name'] = $routeInfo->getRouteName();
    if ($paramBag = $routeInfo->getRawParameters()) {
        $all = $paramBag->all();
        unset($all['wm_page']);
        $variables['pager']['#route_parameters'] = $all;
    }
}

/**
 * Implements hook_cron()
 */
function wmcontroller_cron()
{
    wmcontroller_cron_purge_expired();
}

/**
 * Purge expired wmcontroller_cache items.
 */
function wmcontroller_cron_purge_expired()
{
    $ctr = Drupal::getContainer();

    $items = $ctr->get('wmcontroller.cache.manager')
        ->purge($ctr->getParameter('wmcontroller.cache.purge_per_cron'));
}

/**
 * Implements hook_entity_update()
 */
function wmcontroller_entity_update(\Drupal\Core\Entity\EntityInterface $entity)
{
    $manager = \Drupal::service('wmcontroller.cache.manager');
    foreach ($entity->getCacheTagsToInvalidate() as $tag) {
        $manager->purgeByTag($tag);
    }
}

